package problem_2;

import java.util.ArrayList;
import java.util.List;

public class Problem2 {
    /*
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

            1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
     */

    public static void main(String[] args) {
        List<Integer> list = fibonacci(4000000);
        int result = list.stream().mapToInt(n -> n).filter(n -> n % 2 == 0).sum();
        System.out.println(result);
    }

    private static List<Integer> fibonacci(int maxValue) {
        List<Integer> list = new ArrayList<>();
        list.add(0);

        int j = 1;
        while (list.get(list.size() - 1) <= maxValue || ((list.get(j - 1) + list.get(j - 2)) >= maxValue)) {
            if (j == 1 || j == 2) {
                list.add(1);
            } else {
                list.add(list.get(j - 1) + list.get(j - 2));
            }
            j++;
        }
        return list;
    }

}
